FROM g127/java as builder

RUN echo "ok"

FROM jenkins/jenkins:lts-alpine

USER root

# env
ENV TZ=Asia/Shanghai \
    PATH=${PATH}:/opt/maven/bin:/opt/gradle/bin:/opt/java/bin \
    SLAVE_AGENT_PORT=50000 \
    CASC_JENKINS_CONFIG=$JENKINS_HOME/casc_configs \
    JAVA_OPTS=" -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+08 -Dorg.apache.commons.jelly.tags.fmt.timeZone=GMT+08 -Djenkins.install.runSetupWizard=false "


# nodejs begin https://github.com/nodejs/docker-node/tree/master/14/alpine3.10
ENV NODE_VERSION 14.14.0

RUN addgroup -g 2000 node \
    && adduser -u 2000 -G node -s /bin/sh -D node \
    && apk add --no-cache \
        libstdc++ \
    && apk add --no-cache --virtual .build-deps \
        curl \
    && ARCH= && alpineArch="$(apk --print-arch)" \
      && case "${alpineArch##*-}" in \
        x86_64) \
          ARCH='x64' \
          CHECKSUM="03e07b7e8d1c0aee204a4db53d9e84748623d2498476226b68eaaf61280a2e59" \
          ;; \
        *) ;; \
      esac \
  && if [ -n "${CHECKSUM}" ]; then \
    set -eu; \
    curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz"; \
    echo "$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" | sha256sum -c - \
      && tar -xJf "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
      && ln -s /usr/local/bin/node /usr/local/bin/nodejs; \
  else \
    echo "Building from source" \
    # backup build
    && apk add --no-cache --virtual .build-deps-full \
        binutils-gold \
        g++ \
        gcc \
        gnupg \
        libgcc \
        linux-headers \
        make \
        python3 \
    # gpg keys listed at https://github.com/nodejs/node#release-keys
    && for key in \
      4ED778F539E3634C779C87C6D7062848A1AB005C \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      1C050899334244A8AF75E53792EF661D867B9DFA \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
      C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
      108F52B48DB57BB0CC439B2997B01419BD92F80A \
      B9E2F5981AA6E0CD28160D9FF13993A75599653C \
    ; do \
      gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
      gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xf "node-v$NODE_VERSION.tar.xz" \
    && cd "node-v$NODE_VERSION" \
    && ./configure \
    && make -j$(getconf _NPROCESSORS_ONLN) V= \
    && make install \
    && apk del .build-deps-full \
    && cd .. \
    && rm -Rf "node-v$NODE_VERSION" \
    && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; \
  fi \
  && rm -f "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" \
  && apk del .build-deps \
  # smoke tests
  && node --version \
  && npm --version

ENV YARN_VERSION 1.22.5

RUN apk add --no-cache --virtual .build-deps-yarn curl gnupg tar \
  && for key in \
    6A010C5166006599AA17F08146C2130DFD2497F5 \
  ; do \
    gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
    gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
    gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
  done \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
  && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && mkdir -p /opt \
  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
  && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && apk del .build-deps-yarn \
  # smoke test
  && yarn --version

# nodejs end


COPY --from=builder /opt /opt

RUN echo 'run script' \
    # setting apk mirror
    # && sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories \
    && sed -i 's/mirrors.tuna.tsinghua.edu.cn/dl-cdn.alpinelinux.org/g' /etc/apk/repositories \
    && apk update \
    # curl
    && apk add --upgrade curl && curl --version \
    # git 
    && apk add --upgrade git git-lfs && git --version \
    # svn
    && apk add --upgrade subversion && svn --version \
    # rsync
    && apk add --upgrade rsync && rsync --version \
    # ansible
    && apk add --upgrade ansible && mkdir -p /etc/ansible && echo "localhost" >/etc/ansible/hosts && ansible --version \
    # ansible ssh 密码方式需要sshpass
    && apk add --upgrade sshpass \
    # packer
    && apk add --upgrade packer --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing && packer --version \
    # packer
    && apk add --upgrade terraform --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community && terraform --version \
    # mvn
    && mvn --version \
    # gradle
    && gradle --version \
    # jmeter https://mirrors.tuna.tsinghua.edu.cn/apache/jmeter/binaries/apache-jmeter-5.2.1.zip
    #&& JMETER_DL_URL=${TSINGHUA_MIRROR}/apache/jmeter/binaries/apache-jmeter-5.2.1.tgz \
    && JMETER_DL_URL=https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.2.1.tgz \
    && curl -jksSL -o /tmp/apache-jmeter.tgz ${JMETER_DL_URL} \
    && gunzip /tmp/apache-jmeter.tgz \
    && tar -C /opt -xf /tmp/apache-jmeter.tar \
    && ln -s /opt/apache-jmeter-5.2.1 /opt/apache-jmeter \
    # docker
    #&& DOCKER_DL_URL=${TSINGHUA_MIRROR}/docker-ce/linux/static/stable/x86_64/docker-18.09.9.tgz \
    && DOCKER_DL_URL=https://download.docker.com/linux/static/stable/x86_64/docker-18.09.9.tgz \
    && curl -fsSL -o /tmp/docker.tgz ${DOCKER_DL_URL} \
    && tar -C /tmp -xzvf /tmp/docker.tgz \
    && mv /tmp/docker/* /usr/local/bin/ \
    && docker -v \
    # init folder
    && export SWITCH_RUN=init && /opt/docker-entrypoint.sh

ENV PATH=${PATH}:/opt/apache-jmeter/bin


# Copy casc_configs Configuration-as-code
COPY ref/casc_configs/ /usr/share/jenkins/ref/casc_configs/

# Copy init.groovy.d
COPY ref/init.groovy.d/ /usr/share/jenkins/ref/init.groovy.d/

# Copy Plugins
COPY ref/plugins/ /usr/share/jenkins/ref/plugins/

USER jenkins

ENV TZ=Asia/Shanghai \
    PATH=${PATH}:/usr/local/bin:/opt/maven/bin:/opt/gradle/bin:/opt/java/bin:/opt/apache-jmeter/bin
# Disable signature checking on DownloadService
#ENV JAVA_OPTS -Dhudson.model.DownloadService.noSignatureCheck=true

# ENTRYPOINT
ENTRYPOINT ["tini", "--", "/usr/local/bin/jenkins.sh"]

# 构建
# docker build -f Dockerfile.lts-devops -t g127/jenkins:lts-devops .
# 启动并查看
# docker run -it --rm  --name jenkins-devops g127/jenkins:lts-devops /bin/bash
# 启动(后台)
# docker run -it --rm  --name jenkins -p 8080:8080 -v $(pwd)/.jenkins_home:/var/jenkins_home -d g127/jenkins:lts-devops
# 测试插件
# docker run -it --rm  --name jenkins -p 8080:8080 -v `pwd`/ref/plugins:/usr/share/jenkins/ref/plugins  -d g127/jenkins:lts-devops
# 删除容器
# docker rm -fv jenkins-devops
# 推送
# docker push g127/jenkins:lts-devops